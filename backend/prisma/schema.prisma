// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuarios
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("VENDEDOR") // ADMIN, VENDEDOR, CONSULTA
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]

  @@map("users")
}

// Modelo de Proveedores
model Supplier {
  id           String    @id @default(uuid())
  name         String
  phone        String?
  email        String?
  address      String?
  city         String?
  province     String?
  observations String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]

  @@map("suppliers")
}

// Modelo de Productos
model Product {
  id                 String          @id @default(uuid())
  name               String
  code               String          @unique
  supplierId         String?
  supplier           Supplier?       @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  costPrice          Float
  salePrice          Float
  percentageEnabled  Boolean         @default(false)
  percentageValue    Float           @default(0)
  image              String?
  stock              Int             @default(0)
  minStock           Int             @default(5)
  description        String?
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  saleItems          SaleItem[]
  stockMovements     StockMovement[]

  @@map("products")
}

// Modelo de Clientes
model Customer {
  id              String              @id @default(uuid())
  name            String
  phone           String?
  email           String?
  address         String?
  cuitDni         String?             @unique
  accountType     String              @default("EFECTIVO") // EFECTIVO, CUENTA_CORRIENTE
  creditLimit     Float               @default(0)
  currentBalance  Float               @default(0)
  observations    String?
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  sales           Sale[]
  accountPayments CustomerPayment[]

  @@map("customers")
}

// Modelo de Pagos de Cuenta Corriente de Clientes
model CustomerPayment {
  id          String   @id @default(uuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  amount      Float
  paymentMethod String
  reference   String?
  description String?
  createdAt   DateTime @default(now())
  createdBy   String?

  @@map("customer_payments")
}

// Modelo de Ventas
model Sale {
  id            String       @id @default(uuid())
  saleNumber    String       @unique
  customerId    String?
  customer      Customer?    @relation(fields: [customerId], references: [id], onDelete: SetNull)
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  subtotal      Float
  tax           Float
  discount      Float        @default(0)
  extraPercent  Float        @default(0)
  total         Float
  paymentMethod String?      // EFECTIVO, TRANSFERENCIA, TARJETA_CREDITO, TARJETA_DEBITO, CUENTA_CORRIENTE
  amountPaid    Float?
  change        Float?
  status        String       @default("COMPLETADA") // PENDIENTE, COMPLETADA, CANCELADA
  observations  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  items         SaleItem[]
  payments      Payment[]

  @@map("sales")
}

// Modelo de Items de Venta
model SaleItem {
  id         String   @id @default(uuid())
  saleId     String
  sale       Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  unitPrice  Float
  subtotal   Float
  createdAt  DateTime @default(now())

  @@map("sale_items")
}

// Modelo de Pagos
model Payment {
  id            String   @id @default(uuid())
  saleId        String
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  amount        Float
  paymentMethod String   // EFECTIVO, TRANSFERENCIA, TARJETA_CREDITO, TARJETA_DEBITO, CUENTA_CORRIENTE
  reference     String?
  createdAt     DateTime @default(now())

  @@map("payments")
}

// Modelo de Movimientos de Stock
model StockMovement {
  id            String   @id @default(uuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  type          String   // ENTRADA, SALIDA, AJUSTE, VENTA
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  reference     String?
  createdAt     DateTime @default(now())

  @@map("stock_movements")
}

// Modelo de Configuraci√≥n
model Config {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("config")
}
